# we use a threshold of -1.2 or + 1.2
gene <- names(foldchanges.1)[abs(foldchanges.1) > -1.00]
gene
jv_rad <- data_results[, c("name","ir_vs_sham_significant", "ir_vs_sham_ratio", "ir_vs_sham_p.adj")]
foldchanges.1 = jv_rad$ir_vs_sham_ratio
names(foldchanges.1) = jv_rad$name
# we use a threshold of -1.2 or + 1.2
gene <- names(foldchanges.1)[abs(foldchanges.1) > -1.20]
gene
jv_rad <- data_results[, c("name","ir_vs_sham_significant", "ir_vs_sham_ratio", "ir_vs_sham_p.adj")]
foldchanges.1 = jv_rad$ir_vs_sham_ratio
names(foldchanges.1) = jv_rad$name
# we use a threshold of -1.2 or + 1.2
gene <- names(foldchanges.1)[abs(foldchanges.1) > -2.20]
gene
jv_rad <- data_results[, c("name","ir_vs_sham_significant", "ir_vs_sham_ratio", "ir_vs_sham_p.adj")]
foldchanges.1 = jv_rad$ir_vs_sham_ratio
names(foldchanges.1) = jv_rad$name
# we use a threshold of -1.2 or + 1.2
gene <- names(foldchanges.1)[abs(foldchanges.1) > 0.20]
gene
jv_rad <- data_results[, c("name","ir_vs_sham_significant", "ir_vs_sham_ratio", "ir_vs_sham_p.adj")]
foldchanges.1 = jv_rad$ir_vs_sham_ratio
names(foldchanges.1) = jv_rad$name
# we use a threshold of -1.2 or + 1.2
gene <- names(foldchanges.1)[abs(foldchanges.1) > 0.10]
gene
jv_rad <- data_results[, c("name","ir_vs_sham_significant", "ir_vs_sham_ratio", "ir_vs_sham_p.adj")]
foldchanges.1 = jv_rad$ir_vs_sham_ratio
names(foldchanges.1) = jv_rad$name
# we use a threshold of -1.2 or + 1.2
gene <- names(foldchanges.1)[abs(foldchanges.1) > 0.50]
gene
jv_rad <- data_results[, c("name","ir_vs_sham_significant", "ir_vs_sham_ratio", "ir_vs_sham_p.adj")]
foldchanges.1 = jv_rad$ir_vs_sham_ratio
names(foldchanges.1) = jv_rad$name
# we use a threshold of -1.2 or + 1.2
gene <- names(foldchanges.1)[abs(foldchanges.1) > 0.0]
gene
png("jvrad_keggEnrichPathways.png", width = 10, height = 6, units = 'in', res = 600)
#Identify KEGG pathways that are enriched.
ir_vs_sham_kegg <- enrichKEGG(gene,
organism = 'mouse',
keyType = "uniprot",
pvalueCutoff = 0.05)
#plot results
barplot(ir_vs_sham_kegg,
drop=TRUE,
showCategory = 10,
title = "KEGG Enrichment Pathways",
font.size = 12)
ir_vs_sham_kegg
ir_vs_sham_kegg[0:100]
dev.off()
# Install BiocManager if not already installed
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# Use BiocManager to install Bioconductor packages
#BiocManager::install("org.Mm.eg.db")
#BiocManager::install("GO.db")
#BiocManager::install("topGO")
#BiocManager::install("KEGG.db")
#BiocManager::install("ReactomePA")
png("jvrad_cnetplot.png", width = 10, height = 10, units = 'in', res = 600)
enrichplot::cnetplot(ir_vs_sham_kegg,categorySize = "pvalue",
foldChange = 1, colorEdge= F)
dev.off()
png("jvrad_cnetplot.png", width = 10, height = 10, units = 'in', res = 600)
enrichplot::cnetplot(ir_vs_sham_kegg,categorySize = "pvalue",
foldChange = foldchanges.1, colorEdge= F)
dev.off()
?plot_volcano
png("jvrad_volcanoPlot.png", width = 10, height = 6, units = 'in', res = 600)
remove_grids <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ir_vs_sham <- plot_volcano(dep,
contrast = "ir_vs_sham",
label_size = 2,
add_names = TRUE,
point_args = list(mapping = aes(color = point_color)) + remove_grids
ir_vs_sham
png("jvrad_volcanoPlot.png", width = 10, height = 6, units = 'in', res = 600)
remove_grids <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ir_vs_sham <- plot_volcano(dep,
contrast = "ir_vs_sham",
label_size = 2,
add_names = TRUE,
point_args = list(mapping = aes(color = point_color)) + remove_grids
ir_vs_sham
png("jvrad_volcanoPlot.png", width = 10, height = 6, units = 'in', res = 600)
remove_grids <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ir_vs_sham <- plot_volcano(dep,
contrast = "ir_vs_sham",
label_size = 2,
add_names = TRUE,
point_args = list(mapping = aes(color = point_color))) + remove_grids
png("jvrad_volcanoPlot.png", width = 10, height = 6, units = 'in', res = 600)
remove_grids <- theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
ir_vs_sham <- plot_volcano(dep,
contrast = "ir_vs_sham",
label_size = 2,
add_names = TRUE) + remove_grids
ir_vs_sham
dev.off()
dep <- dep %>%
mutate(point_color = case_when(
P.Value < 0.05 & logFC < 0 ~ "down", # significantly down
P.Value < 0.05 & logFC > 0 ~ "up", # significantly up
TRUE ~ "NS") # not significant
)
library(ggplot2)
library(dplyr)
# Sample data creation (replace with your actual data)
dep <- data.frame(
P.Value = c(0.001, 0.04, 0.06, 0.02, 0.5),
logFC = c(1.5, -2.0, 0.5, -1.2, 0.1)
)
# Add point_color column based on conditions
dep <- dep %>%
mutate(point_color = case_when(
P.Value < 0.05 & logFC < 0 ~ "down", # significantly down
P.Value < 0.05 & logFC > 0 ~ "up",   # significantly up
TRUE ~ "NS"                          # not significant
))
# Define a function to create the volcano plot
plot_volcano <- function(df, logFC, pvals, sig_threshold, point_args = list()) {
ggplot(df, aes_string(x = logFC, y = -log10(pvals))) +
geom_point(point_args) +
geom_hline(yintercept = -log10(sig_threshold), linetype = "dashed", color = "red") +
labs(x = "Log Fold Change", y = "-log10(P-Value)", title = "Volcano Plot") +
theme_minimal()
}
# Create the volcano plot
v1 <- plot_volcano(df = dep, logFC = "logFC",
pvals = "P.Value", sig_threshold = 0.05,
# Change point color
point_args = list(mapping = aes(color = point_color)))
# Load the libraries
library(ggplot2)
library(dplyr)
# Your data frame
df <- data.frame(
gene_symbol = c("gene1", "gene2", "gene3"), # replace with actual gene symbols
logFC = c(1.5, -2.0, 0.5),                  # replace with actual log fold changes
p_value = c(0.001, 0.05, 0.2)               # replace with actual p-values
)
# Add a column for -log10 p-values
df <- df %>%
mutate(log_p_value = -log10(p_value))
# Load the libraries
library(ggplot2)
library(dplyr)
# Your data frame
df <- data.frame(
gene_symbol = c("gene1", "gene2", "gene3"), # replace with actual gene symbols
logFC = c(1.5, -2.0, 0.5),                  # replace with actual log fold changes
p_value = c(0.001, 0.05, 0.2)               # replace with actual p-values
)
# Add a column for -log10 p-values
df <- df %>%
mutate(log_p_value = -log10(p_value))
# Define significance thresholds
logFC_threshold <- 1     # Change this value based on your criteria
p_value_threshold <- 0.05
# Create the volcano plot
ggplot(df, aes(x = logFC, y = log_p_value)) +
geom_point(aes(color = (abs(logFC) > logFC_threshold) & (p_value < p_value_threshold))) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "black")) +
theme_minimal() +
labs(
title = "Volcano Plot",
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Significant"
) +
theme(legend.position = "top")
# Load the libraries
library(ggplot2)
library(dplyr)
# Your data frame
df <- data.frame(
gene_symbol = c("gene1", "gene2", "gene3"), # replace with actual gene symbols
logFC = c(1.5, -2.0, 0.5),                  # replace with actual log fold changes
p_value = c(0.001, 0.05, 0.2)               # replace with actual p-values
)
# Add a column for -log10 p-values
df <- df %>%
mutate(log_p_value = -log10(p_value))
# Define significance thresholds
logFC_threshold <- 0     # Change this value based on your criteria
p_value_threshold <- 0.05
# Create the volcano plot
ggplot(df, aes(x = logFC, y = log_p_value)) +
geom_point(aes(color = (abs(logFC) > logFC_threshold) & (p_value < p_value_threshold))) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "black")) +
theme_minimal() +
labs(
title = "Volcano Plot",
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Significant"
) +
theme(legend.position = "top")
# Load the libraries
library(ggplot2)
library(dplyr)
# Your data frame
df <- data.frame(
gene_symbol = c("gene1", "gene2", "gene3"), # replace with actual gene symbols
logFC = c(1.5, -2.0, 0.5),                  # replace with actual log fold changes
p_value = c(0.001, 0.05, 0.2)               # replace with actual p-values
)
# Add a column for -log10 p-values
df <- df %>%
mutate(log_p_value = -log10(p_value))
# Define significance thresholds
logFC_threshold <- 1     # Change this value based on your criteria
p_value_threshold <- 0.05
# Create the volcano plot
ggplot(df, aes(x = logFC, y = log_p_value)) +
geom_point(aes(color = (abs(logFC) > logFC_threshold) & (p_value < p_value_threshold))) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "black")) +
theme_minimal() +
labs(
title = "Volcano Plot",
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Significant"
) +
theme(legend.position = "top")
# Load the libraries
library(ggplot2)
library(dplyr)
# Your data frame
df <- data.frame(
gene_symbol = c("gene1", "gene2", "gene3"), # replace with actual gene symbols
logFC = c(1.5, -2.0, 0.5),                  # replace with actual log fold changes
p_value = c(0.001, 0.05, 0.2)               # replace with actual p-values
)
# Add a column for -log10 p-values
df <- df %>%
mutate(log_p_value = -log10(p_value))
# Define significance thresholds
logFC_threshold <- -1     # Change this value based on your criteria
p_value_threshold <- 0.05
# Create the volcano plot
ggplot(df, aes(x = logFC, y = log_p_value)) +
geom_point(aes(color = (abs(logFC) > logFC_threshold) & (p_value < p_value_threshold))) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "black")) +
theme_minimal() +
labs(
title = "Volcano Plot",
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Significant"
) +
theme(legend.position = "top")
# Load the libraries
library(ggplot2)
library(dplyr)
# Your data frame
df <- data.frame(
gene_symbol = c("gene1", "gene2", "gene3"), # replace with actual gene symbols
logFC = c(1.5, -2.0, 0.5),                  # replace with actual log fold changes
p_value = c(0.001, 0.05, 0.2)               # replace with actual p-values
)
# Add a column for -log10 p-values
df <- df %>%
mutate(log_p_value = -log10(p_value))
# Define significance thresholds
logFC_threshold <- 2     # Change this value based on your criteria
p_value_threshold <- 0.05
# Create the volcano plot
ggplot(df, aes(x = logFC, y = log_p_value)) +
geom_point(aes(color = (abs(logFC) > logFC_threshold) & (p_value < p_value_threshold))) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "black")) +
theme_minimal() +
labs(
title = "Volcano Plot",
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Significant"
) +
theme(legend.position = "top")
# Load the libraries
library(ggplot2)
library(dplyr)
# Your data frame
df <- data.frame(
gene_symbol = c("gene1", "gene2", "gene3"), # replace with actual gene symbols
logFC = c(1.5, -2.0, 0.5),                  # replace with actual log fold changes
p_value = c(0.001, 0.05, 0.2)               # replace with actual p-values
)
# Add a column for -log10 p-values
df <- df %>%
mutate(log_p_value = -log10(p_value))
# Define significance thresholds
logFC_threshold <- 0     # Change this value based on your criteria
p_value_threshold <- 0.05
# Create the volcano plot
ggplot(df, aes(x = logFC, y = log_p_value)) +
geom_point(aes(color = (abs(logFC) > logFC_threshold) & (p_value < p_value_threshold))) +
scale_color_manual(values = c("TRUE" = "red", "FALSE" = "black")) +
theme_minimal() +
labs(
title = "Volcano Plot",
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Significant"
) +
theme(legend.position = "top")
# Load the libraries
library(ggplot2)
library(dplyr)
# Your data frame (example data)
df <- data.frame(
gene_symbol = c("gene1", "gene2", "gene3"), # replace with actual gene symbols
logFC = c(1.5, -2.0, 0.5),                  # replace with actual log fold changes
p_value = c(0.001, 0.05, 0.2)               # replace with actual p-values
)
# Add a column for -log10 p-values
df <- df %>%
mutate(log_p_value = -log10(p_value))
# Define significance thresholds
logFC_threshold <- 0     # Change this value based on your criteria
p_value_threshold <- 0.05
# Filter data for significant points
significant_df <- df %>%
filter(abs(logFC) > logFC_threshold & p_value < p_value_threshold)
# Create the volcano plot with significant points highlighted
ggplot(df, aes(x = logFC, y = log_p_value)) +
geom_point(data = significant_df, aes(color = gene_symbol), size = 3) +  # Size can be adjusted
scale_color_manual(values = c("red")) +  # Set color for significant points
theme_minimal() +
labs(
title = "Volcano Plot",
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Significant Gene"
) +
theme(legend.position = "none")  # Remove legend for clarity if all points are significant
# Load the libraries
library(ggplot2)
library(dplyr)
# Your data frame (example data)
df <- data.frame(
gene_symbol = c("gene1", "gene2", "gene3"), # replace with actual gene symbols
logFC = c(1.5, -2.0, 0.5),                  # replace with actual log fold changes
p_value = c(0.001, 0.05, 0.2)               # replace with actual p-values
)
# Add a column for -log10 p-values
df <- df %>%
mutate(log_p_value = -log10(p_value))
# Define significance thresholds
logFC_threshold <- 1     # Change this value based on your criteria
p_value_threshold <- 0.05
# Filter data for significant points
significant_df <- df %>%
filter(abs(logFC) > logFC_threshold & p_value < p_value_threshold)
# Create the volcano plot with significant points highlighted
ggplot(df, aes(x = logFC, y = log_p_value)) +
geom_point(data = significant_df, aes(color = gene_symbol), size = 3) +  # Size can be adjusted
scale_color_manual(values = c("red")) +  # Set color for significant points
theme_minimal() +
labs(
title = "Volcano Plot",
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Significant Gene"
) +
theme(legend.position = "none")  # Remove legend for clarity if all points are significant
# Load the libraries
library(ggplot2)
library(dplyr)
# Your data frame (example data)
d <- data.frame(
gene_symbol = c("gene1", "gene2", "gene3"), # replace with actual gene symbols
logFC = c(1.5, -2.0, 0.5),                  # replace with actual log fold changes
p_value = c(0.001, 0.05, 0.2)               # replace with actual p-values
)
# Add a column for -log10 p-values
dep <- dep %>%
mutate(log_p_value = -log10(p_value))
# Assuming plot_volcano() function generates the volcano plot
# Load necessary libraries
library(ggplot2)
# Function to plot volcano plot with customization
plot_volcano_custom <- function(data, contrast, label_size = 2, add_names = TRUE) {
# Your custom theme to remove grids
remove_grids <- theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# Example of custom plotting logic (replace with your actual plot_volcano function call)
ggplot(data, aes(x = logFC, y = -log10(p_value), color = ifelse(logFC > 0, "red", "blue"))) +
geom_point() +
scale_color_manual(values = c("red", "blue")) +  # Customize colors as needed
labs(
title = paste("Volcano Plot -", contrast),
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Regulation"
) +
theme_minimal() +
remove_grids  # Apply the custom theme
}
# Example usage (replace with your actual data and contrast)
# Assuming `dep` is your data frame and `ir_vs_sham` is your contrast
ir_vs_sham <- plot_volcano_custom(dep, contrast = "ir_vs_sham", label_size = 2, add_names = TRUE)
# Print or display the plot
print(ir_vs_sham)
# Assuming plot_volcano() function generates the volcano plot
# Load necessary libraries
library(ggplot2)
# Function to plot volcano plot with customization
plot_volcano_custom <- function(dep, contrast, label_size = 2, add_names = TRUE) {
# Your custom theme to remove grids
remove_grids <- theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# Example of custom plotting logic (replace with your actual plot_volcano function call)
ggplot(dep, aes(x = logFC, y = -log10(p_value), color = ifelse(logFC > 0, "red", "blue"))) +
geom_point() +
scale_color_manual(values = c("red", "blue")) +  # Customize colors as needed
labs(
title = paste("Volcano Plot -", contrast),
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Regulation"
) +
theme_minimal() +
remove_grids  # Apply the custom theme
}
# Example usage (replace with your actual data and contrast)
# Assuming `dep` is your data frame and `ir_vs_sham` is your contrast
ir_vs_sham <- plot_volcano_custom(dep, contrast = "ir_vs_sham", label_size = 2, add_names = TRUE)
# Print or display the plot
print(ir_vs_sham)
# Assuming plot_volcano() function generates the volcano plot
# Load necessary libraries
library(ggplot2)
# Function to plot volcano plot with customization
plot_volcano_custom <- function(dep, contrast, label_size = 2, add_names = TRUE) {
# Your custom theme to remove grids
remove_grids <- theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# Example of custom plotting logic (replace with your actual plot_volcano function call)
ggplot(dep, aes(x = logFC, y = -log10(p_value), color = ifelse(logFC > 0, "red", "blue"))) +
geom_point() +
scale_color_manual(values = c("red", "blue")) +  # Customize colors as needed
labs(
title = paste("Volcano Plot -", contrast),
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Regulation"
) +
theme_minimal() +
remove_grids  # Apply the custom theme
}
# Example usage (replace with your actual data and contrast)
# Assuming `dep` is your data frame and `ir_vs_sham` is your contrast
ir_vs_sham <- plot_volcano_custom(dep, contrast = "ir_vs_sham", label_size = 2, add_names = TRUE)
# Print or display the plot
ir_vs_sham
# Assuming plot_volcano() function generates the volcano plot
# Load necessary libraries
library(ggplot2)
# Function to plot volcano plot with customization
plot_volcano_custom <- function(dep, contrast, label_size = 2, add_names = TRUE) {
# Your custom theme to remove grids
remove_grids <- theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black")
)
# Example of custom plotting logic (replace with your actual plot_volcano function call)
ggplot(dep, aes(x = logFC, y = -log10(p_value), color = ifelse(logFC > 0, "red", "blue"))) +
geom_point() +
scale_color_manual(values = c("red", "blue")) +  # Customize colors as needed
labs(
title = paste("Volcano Plot -", contrast),
x = "Log Fold Change",
y = "-Log10 P-value",
color = "Regulation"
) +
theme_minimal() +
remove_grids  # Apply the custom theme
}
# Example usage (replace with your actual data and contrast)
# Assuming `dep` is your data frame and `ir_vs_sham` is your contrast
plot_volcano_custom(dep, contrast = "ir_vs_sham", label_size = 2, add_names = TRUE)
